
from nn.models.losses.losses import mmd
import numpy as np
names=["AE"]
for name in names:


    moment_tensor_data=np.load("geometrical_measures/moment_tensor_data.npy")
    moment_tensor_sampled=np.load("geometrical_measures/moment_tensor+"+name+".npy")
    area_data=np.load("geometrical_measures/area_data.npy")
    area_sampled=np.save("geometrical_measures/area_+"+name+".npy")
    variance=np.load("geometrical_measures/variance_+"+name+".npy")
    variance_data=np.save("geometrical_measures/variance_data.npy")
    mmd_data=np.load("geometrical_measures/mmd_+"+name+".npy")
    error=np.save("geometrical_measures/rel_error+"+name+".npy")


    f = open("./nn/inference_measures/"+name+"_sampled.txt", "a")
    f.write("MMD Area distance of"+name+" is "+str(mmd(area_data,area_sampled))+"\n")
    print("MMD Area distance of"+name+" is "+str(mmd(area_data,area_sampled))+"\n")
    f.write("Percentage error "+name+" is "+str(error.item())+"\n")
    print("Percentage error "+name+" is "+str(error.item())+"\n")
    f.write("Variance from prior of "+name+" is "+str(variance.item())+"\n")
    print("Variance from prior of "+name+" is "+str(variance.item())+"\n")
    f.write("MMD Id distance of"+name+" is "+str(mmd_data)+"\n")
    print("MMD Id distance of"+name+" is "+str(mmd_data)+"\n")
    f.close()
    fig2,ax2=plt.subplots()
    ax2.set_title("XX moment of "+name)
    _=ax2.hist([moment_tensor_data[:,0,0].reshape(-1),moment_tensor_sampled[:,0,0].reshape(-1)],8,label=['real','sampled'])
    ax2.legend()
    fig2.savefig("./nn/inference_graphs/XXaxis_hist_"+name+".png")
    fig2,ax2=plt.subplots()
    ax2.set_title("YY moment of "+name)
    _=ax2.hist([moment_tensor_data[:,1,1].reshape(-1),moment_tensor_sampled[:,1,1].reshape(-1)],8,label=['real','sampled'])
    ax2.legend()
    fig2.savefig("./nn/inference_graphs/YYaxis_hist_"+name+".png")
    fig2,ax2=plt.subplots()
    ax2.set_title("ZZ moment of "+name)
    _=ax2.hist([moment_tensor_data[:,2,2].reshape(-1),moment_tensor_sampled[:,2,2].reshape(-1)],8,label=['real','sampled'])
    ax2.legend()
    fig2.savefig("./nn/inference_graphs/ZZaxis_hist_"+name+".png")
    fig2,ax2=plt.subplots()
    ax2.set_title("XY moment of "+name)
    _=ax2.hist([moment_tensor_data[:,0,1].reshape(-1),moment_tensor_sampled[:,0,1].reshape(-1)],8,label=['real','sampled'])
    ax2.legend()
    fig2.savefig("./nn/inference_graphs/XYaxis_hist_"+name+".png")
    fig2,ax2=plt.subplots()
    ax2.set_title("XZ moment of "+name)
    _=ax2.hist([moment_tensor_data[:,0,2].reshape(-1),moment_tensor_sampled[:,0,2].reshape(-1)],8,label=['real','sampled'])
    ax2.legend()
    fig2.savefig("./nn/inference_graphs/XZaxis_hist_"+name+".png")
    fig2,ax2=plt.subplots()
    ax2.set_title("YZ moment of "+name)
    _=ax2.hist([moment_tensor_data[:,1,2].reshape(-1),moment_tensor_sampled[:,1,2].reshape(-1)],8,label=['real','sampled'])
    ax2.legend()
    fig2.savefig("./nn/inference_graphs/YZaxis_hist_"+name+".png")
    fig2,ax2=plt.subplots()
    ax2.set_title("Area of "+name)
    _=ax2.hist([area_data,area_sampled],8,label=['real','sampled'])
    ax2.legend()
    fig2.savefig("./nn/inference_graphs/Area_hist_"+name+".png")
    fig2,ax2=plt.subplots()
    